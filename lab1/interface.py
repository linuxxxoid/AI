from system_shell import SystemShell


def inner(user_action, choice):
	shell.set_value(user_action, choice)
	return shell.get_value("–î–µ–π—Å—Ç–≤–∏–µ")


def parsing(action):
	if action == "–ù–∞—Å–∞–¥–∏—Ç—å":
		print("–¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞—Å–∞–¥–∏—Ç—å –Ω–∞–∂–∏–≤–∫—É üç§ –Ω–∞ –∫—Ä—é—á–æ–∫!")
	elif action == "–ü–µ—Ä–µ–∑–∞–±—Ä–æ—Å–∏—Ç—å":
		print("–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–±—Ä–æ—Å–∏—Ç—å —É–¥–æ—á–∫—É! üåä")
	elif action == "–í—ã—Ç—è–Ω—É—Ç—å":
		print("–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—å —É–¥–æ—á–∫—É! üé£")
	elif action == "–ñ–¥–∞—Ç—å":
		print("–ü—Ä–æ—è–≤–∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å! ‚è±")
	elif action == "–ü–æ–¥–∫–æ—Ä–º–∏—Ç—å":
		print("–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–æ—Ä–º–∏—Ç—å —Ä—ã–±—É! üêü")
	else:
		print("–Ø –∑–∞–ø—É—Ç–∞–ª—Å—è ü§Ø")

class Interface:
	def __init__(self, index, true_ans, false_ans):
		self.index = index
		self.true_ans = {"yes", "yeah", "yep", "–¥–∞", "1", "–±–µ—Ä–µ–≥", "—Å –±–µ—Ä–µ–≥–∞"} | true_ans
		self.false_ans = {"no", "nope", "not", "–Ω–µ—Ç", "–Ω–µ", "2", "–ª–æ–¥–∫–∞", "—Å –ª–æ–¥–∫–∏"} | false_ans
		self.history = []

	def bait(self):
		action = "–ù–∞–∂–∏–≤–∫–∞–ù–∞—Å–∞–∂–µ–Ω–∞"
		print("–ù–∞–∂–∏–≤–∫–∞ üç§ –Ω–∞—Å–∞–∂–µ–Ω–∞?")
		print("1. –î–∞")
		print("2. –ù–µ—Ç")
		answer = input().lower()

		if answer in self.true_ans:
			answer = True
		elif answer in self.false_ans:
			answer = False
		else:
			while True:
				print("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§Ø, –≤–≤–µ–¥–∏ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"")
				answer = input().lower()

				if answer in self.true_ans:
					answer = True
					break
				elif answer in self.false_ans:
					answer = False
					break
		return action, answer


	def fishing_place(self):
		action = "–¢–∏–ø–†—ã–±–∞–ª–∫–∏"
		print("–†—ã–±–∞—á–∏—à—å —Å –±–µ—Ä–µ–≥–∞ üå¥ –∏–ª–∏ —Å –ª–æ–¥–∫–∏ üõ•?")
		print("1. –ë–µ—Ä–µ–≥")
		print("2. –õ–æ–¥–∫–∞")
		answer = input().lower()
		if answer in self.true_ans:
			answer = "–ë–µ—Ä–µ–≥"
		elif answer in self.false_ans:
			answer = "–õ–æ–¥–∫–∞"
			self.index += 1
		else:
			while True:
				print("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§Ø, \"—Å –±–µ–≥–µ—Ä–∞\" –∏–ª–∏ \"—Å –ª–æ–¥–∫–∏\"")
				answer = input().lower()

				if answer in self.true_ans:
					answer = True
					break
				elif answer in self.false_ans:
					answer = False
					break
		return action, answer


	def distance(self):
		action = "–î–∞–ª—å–Ω–æ—Å—Ç—å–ó–∞–±—Ä–æ—Å–∞"
		print("–ö–∞–∫–æ–≤–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–±—Ä–æ—Å–∞ ‚òÑÔ∏è? (–≤ –º–µ—Ç—Ä–∞—Ö)")
		answer = input()
		while not answer.isdigit():
			print("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§Ø, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ")
			print("–¶–∏—Ñ–µ—Ä–∫–∞–º–∏!")
			answer = input()
		answer = float(answer)
		return action, answer


	def fishing_time(self):
		action = "–í—Ä–µ–º—è–ü–æ–¥–∫–æ—Ä–º–∫–∏"
		print("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ —Ç—ã –ø–æ–¥–∫–∞—Ä–º–ª–∏–≤–∞–ª —Ä—ã–±—É? ‚è±")
		answer = input()
		while not answer.isdigit():
			print("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§Ø, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ")
			print("–¶–∏—Ñ–µ—Ä–∫–∞–º–∏!")
			answer = input()
		answer = float(answer)
		return action, answer


	def fish_action(self):
		action = "–ö–ª—é–µ—Ç"
		print("–ö–ª—é–µ—Ç? üêü")
		print("1. –î–∞")
		print("2. –ù–µ—Ç")
		answer = input().lower()
		if answer in self.true_ans:
			answer = True
		elif answer in self.false_ans:
			answer = False
		else:
			while True:
				print("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§Ø, –≤–≤–µ–¥–∏ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"")
				answer = input().lower()

				if answer in self.true_ans:
					answer = True
					break
				elif answer in self.false_ans:
					answer = False
					break
		return action, answer


	def question(self, obj):
		function = [obj.bait, obj.fishing_place, obj.distance, obj.fishing_time, obj.fish_action]
		lst = function[self.index]()
		self.index += 1
		self.history.append(lst)
		return lst


	def additional_question(self):
		print()
		print("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ—á–µ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫? ü§î")
		print("1. –î–∞")
		print("2. –ù–µ—Ç")
		answer = input().lower()
		while True:
			if answer in self.true_ans:
				print()
				print('–ü–æ—Ç–æ–º—É —á—Ç–æ:')
				n = 1
				for i in self.history:
					print('\t%i.' % n, end=' ')
					n += 1
					if i[0] == "–ù–∞–∂–∏–≤–∫–∞–ù–∞—Å–∞–∂–µ–Ω–∞":
						if inner(i[0], i[1]) != '–ù–∞—Å–∞–¥–∏—Ç—å':
							print('–¢—ã –Ω–∞—Å–∞–¥–∏–ª –Ω–∞–∂–∏–≤–∫—É. üòé')
						else:
							print('–¢—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å–∞–¥–∏–ª –Ω–∞–∂–∏–≤–∫—É, –¥—É–º–∞—é, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–∏–º —Å–µ–π—á–∞—Å. üí™')
					elif i[0] == "–¢–∏–ø–†—ã–±–∞–ª–∫–∏":
						fishingType = i[0]
						if inner(i[0], i[1]):
							print('–¢—ã —Ä—ã–±–∞—á–∏—à—å —Å –±–µ—Ä–µ–≥–∞. üå¥')
						else:
							print('–¢—ã –∑–∞–∫–∏–Ω—É–ª —É–¥–æ—á–∫—É —Å –ª–æ–¥–∫–∏, –∫—Ä–∞—Å–æ—Ç–∞. üõ•')
					elif i[0] == "–î–∞–ª—å–Ω–æ—Å—Ç—å–ó–∞–±—Ä–æ—Å–∞":
						if inner(i[0], i[1]) != '–ü–µ—Ä–µ–∑–∞–±—Ä–æ—Å–∏—Ç—å':
							if fishingType:
								print('–¢—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∏–Ω—É–ª –Ω–∞–∂–∏–≤–∫—É. –° –±–µ—Ä–µ–≥–∞ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ —Ç–∞–∫ —É–∂ –∏ –ø—Ä–æ—Å—Ç–æ. üëç')
							else:
								print('–° –ª–æ–¥–∫–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–ª–µ–∫–æ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –Ω–∞–∂–∏–≤–∫—É. –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å. üôÇ')
						else:
							print('–ù–æ —Ç—ã –∑–∞–∫–∏–Ω—É–ª –Ω–∞–∂–∏–≤–∫—É —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ. üåä –ü–æ–ø—Ä–æ–±—É–π –º–µ—Ç—Ä–∞ –Ω–∞ —Ç—Ä–∏ –æ—Ç –±–µ—Ä–µ–≥–∞ —Ö–æ—Ç—è–±—ã.')
					elif i[0] == "–í—Ä–µ–º—è–ü–æ–¥–∫–æ—Ä–º–∫–∏":
						if inner(i[0], i[1]) != '–ü–æ–¥–∫–æ—Ä–º–∏—Ç—å':
							print('–†—ã–±–∞ —É–∂–µ —É —Ç–≤–æ–µ–π –Ω–∞–∂–∏–≤–∫–∏ –∏ –∂–∞–¥–Ω–æ –ø–æ–∂–∏—Ä–∞–µ—Ç –ø–æ–¥–∫–æ—Ä–º–∫—É. üç§')
						else:
							print('–í–æ–º–æ–∂–Ω–æ, —Ä—ã–±–∞ —É–∂–µ –≤—Å—ë —Å—ä–µ–ª–∞ –∏ —É–ø–ª—ã–ª–∞. üêü –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–ª—é—ë—Ç –∏–ª–∏ –Ω–µ—Ç.')
					elif i[0] == "–ö–ª—é–µ—Ç":
						if inner(i[0], i[1]) == '–í—ã—Ç—è–Ω—É—Ç—å':
							print('–ö–ª—é—ë—Ç, –ø–æ–¥—Å–µ–∫–∞–π —Å–∫–æ—Ä–µ–µ! üé£')
						else:
							for j in range(len(self.history)):
								if inner(self.history[j][0], self.history[j][1]) == '–ü–æ–¥–∫–æ—Ä–º–∏—Ç—å':
									break
							if inner(self.history[j][0], self.history[j][1]) == '–ü–æ–¥–∫–æ—Ä–º–∏—Ç—å':
								print('–ù–µ –∫–ª—é—ë—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ—Ä–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. üç§ –ù—É–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.')
							elif inner(self.history[j][0], self.history[j][1]) == '–ñ–¥–∞—Ç—å':
								print('–ü–æ–∫–∞ –Ω–µ –∫–ª—é—ë—Ç. –ù–æ —Ç—ã –≤—Å—ë —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ üëç, –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å. üêü –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è, –¥—Ä—É–≥ –º–æ–π.')
				break
			elif answer in self.false_ans:
				print("–ù—É –∏ –ª–∞–¥–Ω–æ!")
				break
			else:
				while True:
					print("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§Ø, –≤–≤–µ–¥–∏ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"")
					answer = input().lower()

					if answer in self.true_ans:
						break
					elif answer in self.false_ans:
						break
		print()


	def continue_fishing(self):
		while(True):
			self.history.clear()
			print("–•–æ—á–µ—à—å –µ—â–µ –ø–æ—Ä—ã–±–∞—á–∏—Ç—å?")
			answer = input()
			if answer in self.true_ans:
				answer = True
				shell.clear_storage()
				print("–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º –Ω–∞—à—É —Ä—ã–±–∞–ª–∫—É, –º–æ–π —é–Ω—ã–π –ø–∞–¥–∞–≤–∞–Ω!")
				break
			elif answer in self.false_ans:
				answer = False
				shell.clear_storage()
				print("–ñ–¥—É —Ç–µ–±—è —Å–Ω–æ–≤–∞, –º–æ–π —é–Ω—ã–π –ø–∞–¥–∞–≤–∞–Ω!")
				print("–î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –°–∏–ª–∞! üí™")
				break
			else:
				print("–Ø –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –í–≤–µ–¥–∏ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\" ü§Ø")
		return answer

def q_and_a(interf):
	criteria = None
	while (criteria == None):
		user_action, choice = interf.question(interf)
		criteria = inner(user_action, choice)
	parsing(criteria)
	interf.additional_question()


def introduction():
	print("Hello üëã there!")
	print("I'm general Obi-Wan Kenobi, and I gonna help you with fishing üé£!")
	print("May the Force üí™ be with you!")
	print()


def this_is_there_the_fun_begins():
	introduction()
	fun = True
	while(fun):
		interf = Interface(0, set(), set())
		q_and_a(interf)
		fun = interf.continue_fishing()


if __name__ == '__main__':
	shell = SystemShell()
	shell.compile_file("fishing.max")
	this_is_there_the_fun_begins()
